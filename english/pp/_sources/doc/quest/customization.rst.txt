.. _quest_customization:

Post-Processor Customization
============================

This section outlines the customization features of QUEST.
The :ref:`image below<figure_pp_customization_nav>`
shows the main customization features accessible using the Navigator.

-  :ref:`Startup and Shutdown Procedures<startup_shutdown_procedures>`
   allow you to write macros that are run when special events happen during post-processing.

-  The :ref:`Tape Editor<tape_editor>` allows you to perform
   systematic search/replace string operations on the MCD as it is
   generated by GENER.

-  The :ref:`Dialog Editor<dialog_editor>` allows you to
   build dialog boxes, which can then be used by GENER to query the NC
   programmer for any additional information that is necessary during
   post-processing.

-  :ref:`User Defined Syntax Macros<user_defined_syntax_macros>` are used to develop and support
   your own variations of post-processor commands.

-  :ref:`User Function Macros<user_function_macros>` are used
   to develop your own macro functions that can be called by other
   macros in the post-processor.

-  The :ref:`File Storage<file_storage>` section holds
   read-only data files that can be accessed by the macro processor, as
   well as (for example) post-processor specifications and documentation
   of interest to the post-processor developer.

.. _figure_pp_customization_nav:

.. figure:: ../../media/quest_ppcust.png
   :height: 4.333in
   :align: center

   Post-processor Customization Navigator View

.. _startup_shutdown_procedures:

Startup/Shutdown Procedures
---------------------------

Startup and Shutdown procedures enable customization of GENER processing at the start and end of certain key events.
Customization is done using the ICAM Macro language (see :ref:`“The Macro Language”<macro_language>`).
Generally speaking, macros can extend or replace built-in Icam Post functionality.
The following startup/shutdown procedures are available:

   .. list-table::
      :widths: auto
      :header-rows: 1
      :class: wrap-last

      *  -  Macro Type
         -  When Executed
      *  -  :ref:`Declaration<declar_macro_sum>`
         -  Start of macro processing
      *  -  :ref:`Machine startup/shutdown<start_end_prog_sum>`
         -  Start and end of program
      *  -  :ref:`Break startup/shutdown<break_startup_shutdown_sum>`
         -  Start and end of new program segment
      *  -  :ref:`Tool change startup/shutdown<tlch_startup_shutdown_sum>`
         -  Start and end of tool change
      *  -  :ref:`First tool change startup/shutdown<first_tlch_startup_shutdown_sum>`
         -  Start and end of first tool change
      *  -  :ref:`CYCLE startup/shutdown<cycle_startup_shutdown_sum>`
         -  Start and end of canned cycle
      *  -  :ref:`Motion startup/shutdown<motion_startup_shutdown_sum>`
         -  Start and end of motion
      *  -  :ref:`LCS startup/shutdown<lcs_startup_shutdown_sum>`
         -  Start and end of LCS change
      *  -  :ref:`Operation event<operation_event_sum>`
         -  Start of operation
      *  -  :ref:`Register<register_macro_sum>`
         -  Processing of a register
      *  -  :ref:`Tape<tape_macro_sum>`
         -  Processing of a block of MCD
      *  -  :ref:`Diagnostic<diag_macro_sum>`
         -  Processing of a diagnostic

Double-click on the “Startup/Shutdown Procedures” heading in the
Navigator to open the Startup/ Shutdown Procedures view in the
working window as shown in the image below.

.. _figure_startup_shutdown:

.. figure:: ../../media/quest_startup_macro.png
   :width: 5.681in
   :align: center

   The Startup/Shutdown Macro Facility

Select a macro name and press the Modify button to create or edit it.
Macros can also be opened for editing by double-clicking on the macro name in the
Navigator window. To ignore a macro during GENER processing, either
uncheck the Enable box to disable it, or select the macro name and
press the Delete button to remove it. The “Strong Declaration” setting
is used in concert with the :ref:`Declaration macro<declar_macro>`.

Some startup/shutdown macros are passed information about the event
that has just happened.
For example, a tool change startup macro will be given information about the tool
number that has been selected.
These are called **$P** arguments, named after the variable type that is used within
the macro to access the data.
Some $P arguments can also be set inside the macro to change the outcome of the event.
Tables listing the $P arguments for each of the different macro types can be found
in :ref:`“Invoking Startup/Shutdown Procedures”<invoking_startup_shutdown_procedures>`.
The available $P arguments are also listed in the lower right Help window when you edit a macro.

Startup/Shutdown Macro Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _declar_macro_sum:

Declaration Macro
`````````````````

The declaration macro is executed once only, at the start of macro
processing. Its sole purpose is to provide a standard place to define
global variables and external user defined functions that are shared
amongst the other macros of the post-processor. No other commands can
be specified in a declaration macro.

The declaration macro is used in combination with the “Strong
Declaration” macro setting that appears at the bottom of the RMD and
macro editors. This setting determines how strongly the macro
compiler and processor should enforce the recommended programming
convention that variables be declared before they are used.

See :ref:`“Declaration Macro”<declar_macro>` for more
information about the declaration macro and the strong declaration
settings.

.. _start_end_prog_sum:

Machine Startup/Shutdown Macros
```````````````````````````````

The machine startup and shutdown macros are executed at the beginning
and end of CL file processing respectively.

The machine startup macro is useful for performing initialization
type operations. For example, the predefinition of tool and/or head
parameters using TOOLNO commands, or the initialization of the
relationship between CL file and machine coordinate systems using the
ORIGIN command.

The machine shutdown macro is equally useful for performing any
operations you might want to have executed at the end of the program.
For example, the “End of program” action generates (typically) an
M02.

With a composite post-processor, the component startup macro is
executed each time the component is activated (e.g., by the APPLY
command or $FAPPLY macro function) and the component shutdown macro
is executed just before switching to another component.

.. _break_startup_shutdown_sum:

Break Startup/Shutdown Macros
`````````````````````````````

The break startup and shutdown macros will only appear if tape
segmentation is available, as specified in the BREAK section of the
“Optional Post-processor Words” chapter.

The break shutdown macro is run just before the tape is segmented, in
the same way that the machine shutdown macro is run at the end of the
entire program. You can place actions in the break shutdown
macro to handle any special requirements needed at the end of the
current program segment before breaking the tape.

Similarly, the break startup macro is run after the tape has been
segmented, but before processing continues reading the CL file. You
can place actions in the break startup macro to handle any special
requirements needed at the start of the new program segment.

Select the “Use machine macro” option in the Break Startup or
Shutdown RMD editor to use the machine startup and shutdown macros
instead of the break startup and shutdown macros when breaking tapes.

Break macros can be turned off and on using the $BRKMAC macro system
variable (see :ref:`“Macro Variables”<macro_variables>`). Set $BRKMAC to $FALSE to
disable break or machine macro processing at a tape break; set
$BRKMAC to $TRUE (the default) to enable break or machine macro
processing for each tape break.

.. _tlch_startup_shutdown_sum:

Tool Change Startup/Shutdown Macros
```````````````````````````````````

Tool change startup and shutdown macros are executed just prior to
and immediately following a tool change operation. The tool change
startup macro can be used to change parameter settings for the
command (e.g., setting the tool length compensation parameter if
omitted) and to perform any custom operations necessary before
changing the tool. The tool change shutdown macro can likewise be
used to perform any special initialization necessary once the new
tool is loaded. See :ref:`“Tool Change Startup/Shutdown Macros”<tlch_startup_shutdown_macros>` for the list of $P
variables available to a tool change startup macro.

.. _first_tlch_startup_shutdown_sum:

First Tool Change Startup/Shutdown Macros
`````````````````````````````````````````

The first tool change startup and shutdown macros are executed just
prior to and immediately following the first tool change operation.
They are identical in all respects to the normal tool change macros,
except that if defined, these macros are used on the first tool
change.

The $FT macro system variable can be used to force a “first” tool
condition at the next tool change (see :ref:`“Tooling Variables”<tooling_variables>`).
By default, only the first tool change qualifies.

.. _cycle_startup_shutdown_sum:

CYCLE Startup/Shutdown Macros
`````````````````````````````

The cycle startup macro can be used to inhibit or change key cycle
parameter values for the upcoming cycle block. The startup macro can
also be used to output special codes necessary for the cycle that are
not otherwise handled by Icam Post.

For post-processors defining “Macro” driven cycles (*Automated Canned
Cycles / General Drill Cycle Information* question #1), the startup
macro is responsible for outputting all cycle parameters with the
exception of the positioning axes. RMD actions are available to
handle the special cycle requirements of Siemens and Heidenhain
controllers, as follows:

-  HEIDENHAIN Conversational drilling cycles

-  HEIDENHAIN ISO drilling cycles

-  SIEMENS drilling cycles

On machines with “activator” type cycles, the startup macro will be
invoked twice each time the activator block is output. The first
invocation of the macro will be for the activation definition block;
the second invocation will be for the cycle control point.

See :ref:`“Cycle Startup/Shutdown Macros”<cycle_startup_shutdown_macros>` for the list of $P variables
available to a cycle startup macro.

The cycle shutdown macro is invoked immediately following the cycle block.

Cycle macros can be turned off and on using the “Enable CYCLE macro”
and “Disable CYCLE macro” RMD actions. These RMD actions set and
clear a $CYCMAC macro system variable (see :ref:`“Macro Variables”<macro_variables>`).
Set $CYCMAC to $FALSE to disable the cycle macro; set $CYCMAC to $TRUE (the default)
to enable cycle macro processing for each cycle point found.

.. _motion_startup_shutdown_sum:

Motion Startup/Shutdown Macros
``````````````````````````````

Motion macros are used to output information before and after motions
found within the CL file and other macros. They can also be used to
suppress motions under certain conditions and to process additional
motions if necessary. Information about the specific motion is
available to the macro in a set of $P variables (so called because
these variables all start with the characters “$P”). See :ref:`“Motion
Startup/Shutdown Macros”<motion_startup_shutdown_macros>` for the list of $P variables
and their meaning.

A motion startup macro is run just before a motion is processed.
Circular, spline and pattern motions call the motion macro once, at
the start of the motion, not once for each intermediate point that
makes up the original CL file specification of the compound motion.
Sometimes GENER will segment a motion into smaller parts (perhaps due
to linearization or for safe positioning). The motion macro will be
called once only at the start, not once for each segmented move.

A motion shutdown macro is run after the motion has completed
processing.

Motion macros can be turned off and on using the “Enable motion
macro” and “Disable motion macro” RMD actions. These RMD actions set
and clear a $MTNMAC macro system variable (see :ref:`“Macro Variables”<macro_variables>`).
Set $MTNMAC to $FALSE to disable the motion macro or to $TRUE (the default) to
enable motion macro processing for each motion found.

.. _lcs_startup_shutdown_sum:

LCS Startup/Shutdown Macros
```````````````````````````

The LCS startup and shutdown macros will only appear if LCS (local
coordinate system) transformation is available, as specified in the
“Coordinate System” section of the “Control Description” chapter.

The LCS startup macro is run when GENER is about to output the codes
to either activate or deactivate LCS. Information about the specific
LCS change is available to the macro in a set of $P variables.
See :ref:`“LCS Startup/Shutdown Macros”<lcs_startup_shutdown_macros>`
for the list of $P variables and their meaning. When the LCS startup
macro exits, GENER then performs the LCS change.

The LCS shutdown macro is run after the LCS processing has completed.
The LCS startup and shutdown macros can be used to fine tune the
output before and after the LCS change, and even to replace the
default LCS codes output by GENER.

LCS macros can be turned off and on using the “Enable LCS macro” and
“Disable LCS macro” RMD actions. These RMD actions set and clear a
$LCSMAC macro system variable (see :ref:`“Macro Variables”<macro_variables>`).
Set $LCSMAC to $FALSE to disable the LCS macro; set $LCSMAC to $TRUE (the default)
to enable LCS macro processing for each change in LCS.

.. _operation_event_sum:

Operation Event Macro
`````````````````````

An operation event (OE) macro is executed at the start of each
manufacturing operation, as identified by an OPTYPE command in the CL
file. The macro is called when the OPTYPE command is processed by
GENER. The $P variables of the macro and the $OE system variables
contain information about the upcoming operation. See :ref:`“Operation Event Macro”<operation_event_macro>` for details.

The OE macro can be turned off and on using the “Enable OE macro” and
“Disable OE macro” RMD actions. These RMD actions set and clear an
$OEMAC macro system variable (see :ref:`“Macro Variables”<macro_variables>`).
Set $OEMAC to $FALSE to disable the OE macro or to $TRUE (the default) to enable OE macro
processing for each new operation.

.. _register_macro_sum:

Register Macro
``````````````

A Register macro is executed whenever a register is about to be added
to the current tape block buffer. The macro is called before the
register is written to the buffer. Register macros have restrictions
on the types of commands and actions that are allowed. See :ref:`“Register Macro”<register_macro>` for
details on these restrictions and the list of $P variables available to a register macro.

The register macro can be turned off and on using the “Enable
register macro” and “Disable register macro” RMD actions. These RMD
actions set and clear a $REGMAC macro system variable (see :ref:`“Macro Variables”<macro_variables>`).
Set $REGMAC to $FALSE to disable the register macro or to $TRUE (the default)
to enable register macro processing for each register to be
output. There is also a $REGMATCH sequence variable that can
optionally be used to restrict the registers to be matched.

.. _tape_macro_sum:

Tape Macro
``````````

A tape macro is executed whenever the tape block buffer is ready for
output. The macro is called before the buffered NC block is written
out to the tape file. Tape macros have restrictions on the types of
commands and actions that are allowed. See :ref:`“Tape Macro”<tape_macro>`
for details on these restrictions and the list
of $P variables available to a tape macro.

The tape macro can be turned off and on using the “Enable tape macro”
and “Disable tape macro” RMD actions. These RMD actions set and clear
a $TAPMAC macro system variable (see :ref:`“Macro Variables”<macro_variables>`).
Set $TAPMAC to $FALSE to disable the tape macro or to $TRUE (the default) to enable
tape macro processing for each block of tape to be output.

.. _diag_macro_sum:

Diagnostic Macro
````````````````

A diagnostic macro is executed whenever a diagnostic (message, warning, error, fatal) is processed.
The macro will be called even if the diagnostic is disabled,
however it will not be called if all diagnostic processing is disabled via the $ERRMSG system variable.
The macro is called before the diagnostic is output and counted in the statistics.
Diagnostic macros have restrictions on the types of commands and actions that are allowed.
See :ref:`“Diagnostic Macro”<diag_macro>` for details on these restrictions and
the list of $P variables available to a diagnostic macro.

The diagnostic macro can be turned off and on using the $DIAGMAC macro system variable
(see :ref:`“Macro Variables”<macro_variables>`).
Set $DIAGMAC to $FALSE to disable the diagnostic macro or to $TRUE (the default)
to enable diagnostic macro processing for each diagnostic that occurs.

The RMD Facility
~~~~~~~~~~~~~~~~

Startup/shutdown macros are created using the RMD facility as shown in the image below.

.. _figure_rmd:

.. figure:: ../../media/quest_rmd.png
   :width: 5.681in
   :align: center

   The RMD Facility

RMD is an acronym for Rapid Macro Development. The RMD facility lists
a series of predefined actions in alphabetical order, which you can
assemble like building blocks, to create the final macro. Two special
macros are listed at the top:

-  The “\ **Custom macro**\ ” action lets you develop your own macro
   code using the full power of Icam Post’s macro language. See :ref:`“User Defined Syntax Macros”<user_defined_syntax_macros>`
   for details on editing, compiling and saving macros. See :ref:`“The Macro Language”<macro_language>`
   for details on macro programming.

   \

-  The “\ **Any PP Command**\ ” action lets you type in post-processor
   commands, to be executed by the macro processor.

To **add** a new macro action, select it from the list of actions on
the left and then press the “\ **Add»**\ ” button in the middle
column. Actions are added below the currently selected action in the
right-hand list of actions that make up the current macro. You can
reposition an action by selecting it in the right-hand list and then
pressing the **up-arrow** and **down-arrow** buttons at the top of
the window, or you can use a drag-and-drop action using the mouse
pointer.

To **delete** an action from the macro, select it in the right hand
list and then press the delete key on the keyboard or the “delete”
button at the top of the window.

To **modify** an existing macro action, select it in the right hand
list and then press the “open” button at the top of the window. You
can only modify actions that required some additional input when they
were added. For example, the “Custom macro” and “Any PP Command”
actions can be modified whereas the “Display the date” action cannot.

The **convert** button at the upper right can be used to convert the
selected actions in the right hand list to a “Custom macro” type.
This then allows these actions to be opened and their macro code
modified. For example, selecting a “Display the date” action in the
right hand list and converting it to a custom macro, then allows it
to be opened and edited.

Individual macro actions can be **enabled** or **disabled**. Actions
are enabled by default when added. Clear the check box to the left of
an action to disable it. A disabled action will not be executed by
the post-processor. Disabled actions can only be re-enabled in the
questionnaire (i.e., there is no facility to dynamically
enable/disable individual macro actions in GENER).

The “\ **Strong Declaration**\ ” setting defines how strict the macro
processor is concerning the timing and location of macro variable
declarations (see :ref:`“Declaration Macro”<declar_macro>`).

.. include:: tapeeditor.rsti

.. include:: dialogeditor.rsti

.. _user_defined_syntax_macros:

User Defined Syntax Macros
--------------------------

This section lets you define your own post-processor commands and
variations of existing commands. This is done by creating macros that
will “match” commands read from the CL file. These macros can in turn
do whatever processing is necessary for the matched command. See
:ref:`“The Macro Language”<macro_language>` to learn how to program using the macro language.

Double-click on the “User Defined Syntax Macros” selection in the
Navigator to open the main macro view in the working window. This
view shows all user-defined macros and also shows startup/shutdown
macros if the “Show RMD macros” check box is selected. An image
of the User Defined Syntax Macros main view is shown in the image below.

.. _figure_user_def:

.. figure:: ../../media/quest_usermac.png
   :width: 5.681in
   :align: center

   The User-Defined Syntax Macro Facility

The navigator groups macros by post-processor major word (i.e.,
command). You can view the list of all macros for a specific command
by double-clicking on the command name in the navigator. You can open
a macro for editing by double-clicking on the macro definition in the
navigator or in the working window. You can edit multiple macros by
first selecting them in the working window (use the CTRL and SHIFT
keys with the mouse) and then pressing the “Modify” button.

Adding Macros
~~~~~~~~~~~~~

Press the Add button to add a new macro. You will be presented with a
list of all known post-processor commands, otherwise known as Major
words. The complete list of standard major words can be found in the
:ref:`“Post-Processor Major Words”<annex_major_words>` annex. You can
add new words using the **Tools»Words Manager** menu-bar selection.
Once added, they will appear in the list of available commands. Icam Post internally
represents all keywords by their associated integer code. When adding
new Major words, use codes 1900 through 1999 to avoid conflicts. When
adding Minor words (i.e., keywords that are only found to the right
of the / character in post-processor commands), use codes 900 through
through 999. The words manager keeps track of new keywords in a words file
(see the “words” symbol definition in :ref:`“The ICAM.DEF File”<def_file>`).

When a new macro is added, the macro editor occupies the main work
space. The first line of the macro will contain the selected word
followed by a / character. This first line of the macro is called a
Syntax Definition Line, or just SDL for short. The SDL defines under
what circumstances the user-defined macro should be run. Simple SDLs,
like “AIR/OFF”, specify that the macro should be run when that exact
command is read from the CL file. SDLs can also contain required and
optional parameters, to handle even the most complex syntax
requirements. A complete discussion of SDLs can be found in
:ref:`“Invoking User Defined Macros”<invoking_user_defined_macros>`.

The remaining lines of the macro define the actions to perform when
the macro is matched. GENER replaces the original command with the
contents of the macro, which can contain assignments, logic
statements, loops, other post-processor commands and even the
original “matching” command. In this way macros can be written to
perform actions or commands before, after, or instead of the matched
command. Post-processor commands that are coded inside macros are
processed by GENER in the same way as those that come from the CL
file. This means that they are also candidates for macro matching.
This also means that macros can “call” other macros using post-processor
commands (there is no practical limit on how deeply macros
can be nested).

Loading and Exporting macros
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Press the Export button to select the user-defined macros to be
written in ASCII format to the selected file. Each macro is followed
by an ENDMAC command in the generated file.

Press the Import button to replace **all** user-defined macros with
those defined in the selected ASCII file. Note that this action
cannot be undone.

.. _macro_editor:

Macro Editor
~~~~~~~~~~~~

The macro editor colorizes the macro code as you type it, with
comments in green, macro commands in blue, et cetera. The
colorization scheme can be changed from the “Macro Editor” tab of the
**Tools»Preferences** menu-bar selection. The editor also provides
the following right-mouse button pop-up features:

-  **Expression Evaluator:** Use this feature to create, modify and test
   $FEDIT and $FMATCH macro function calls. Place the input cursor over the
   function name and select this function to edit an existing call. If
   the cursor is not on a $FEDIT or $FMATCH call, a new call will be
   created.

   \

-  **Show** **line numbers:** Enables the display of line numbers to the
   left of each line.

   \

-  **Show** **whitespace markers:** Shows a ‘·’ in place of blanks and
   an arrow in place of tabs.

   \

-  **Enable Word Completion**: Use this feature to have the macro editor
   display a list of possible system variables or function names that
   match the text typed so far. Type any punctuation to accept the
   highlighted name; press the Esc key to ignore the suggestion.

   \

-  **Comment/Uncomment:** Use this function to add comments or remove
   comments from a block of selected macro lines. If all macro lines in
   the selected range have comments,
   then one layer of comments will be removed from the entire block.
   If any or all lines in the selected range are not already commented,
   then a new layer of comments will be added to the entire range.

   \

-  **Resequence $P Variables:** Use this to resequence the $P variables
   on the SDL line so that the first is $P1, the second $P2 and so on.
   This function is only available after first pressing the Compile
   button on a macro that has $P variables that are not in sequence.

   \

-  **Show Source:** This gives you the option to preserve the original
   spacing and letter case of your macro code, or to have it formatted
   and auto-indented each time the macro is opened in the editor. There
   are two styles of formatting available: The “Standard” format uses
   uppercase and ANSI standard logical operators (e.g., :mono:`IF/X.GT.0.AND.X.LE.10`)
   whereas the “C” format uses lowercase and C style
   logical operators (e.g., :mono:`if/x>0&&x<=10`). The choice of formatting
   style and whether or not to apply it when opening a macro for editing
   can be made from the “Macro Editor” tab of the **Tools»Preferences**
   menu-bar selection.

Pressing the F1 function key while the cursor is placed over a system
variable or function name will bring up the on-line help with more
information about the selected item.

You can select your own editor (called an “external” editor) to use
instead of the default editor provided by QUEST. This is done from
the “Macro Editor” tab of the **Tools»Preferences** menu-bar
selection. You must define the full path and filename of the editor
executable and include any necessary command line arguments. You must
also choose the name of a file to be used as a placeholder for macros
that you will edit. The macro file name must be unique to your own
personal file space, to avoid interference with anyone else running
QUEST.

Compiling and Saving Macros
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When in the macro editor, you can use the “Compile” button to check
that your code has been written correctly. Macros are always
automatically compiled when you press the “OK” button after you have
finished editing. The “Cancel” button ignores all changes made since
you entered the macro editor for the current command. The “Reset”
button ignores all changes, but keeps the macro editor active,
showing the original macro code.

If a macro has compilation errors, the error diagnostics will be
listed in the lower right-hand Build window. A macro must compile
without errors in order for it to be used by GENER. You can force
QUEST to exit a macro that has errors, but in this case the macro
will be marked as non-executable
(if any RMD custom macro component does not compile, then the entire
RMD macro is marked as non-executable).
This means that the macro cannot be used by GENER but remains available,
as written, for editing at a later date with QUEST.

The “\ **Strong Declaration**\ ” setting defines how strict the macro
compiler is concerning the timing and location of macro variable
declarations (see the :ref:`“Declaration Macro”<declar_macro>`).

Ordering Macros
~~~~~~~~~~~~~~~

You can have more than one macro with the same post-processor
command. When this is the case, GENER will try to find a match
starting with the first one in the list. The order is not important
when each macro has completely different syntax. But it becomes much
more important when this is not the case. In the example shown in
:ref:`“The User-Defined Syntax Macro Facility” image<figure_user_def>`,
there is an AIR macro with the definition “AIR/\*”. This SDL matches
**any** AIR command. We can imagine that the author included it to
simply output a diagnostic if none of the other AIR command macros
were matched. If this AIR/\* macro were placed in front of the others, then any AIR
command would produce the diagnostic (i.e., GENER would match it
first and as a result, would replace the original, potentially good,
AIR command by a diagnostic message).

To change the order of a macro within a group of similarly named
macros, select the macro and then use the up-arrow and down-arrow
buttons to move it. You can also use the mouse to change the order by
first selecting the macro and using drag-and-drop.

Modifying and Deleting Macros
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Macros can be temporarily disabled by clearing the “Enable” check box
that appears to the left of each definition in the main working
window. Clearing this check box stops GENER from using the macro, but
still keeps the macro associated with the post-processor.

You can modify or delete one or more macros by selecting them in the
main working window and then pressing the Modify or Delete buttons.

When modifying multiple macros, QUEST will add a comment separator at
the start of each macro as a visual aid. It will end each macro with
an ENDMAC command. The comment separator will end with the word
“disabled” if the macro is disabled. You can add or remove this
keyword yourself from the comment line to enable or disable macros.
The image below shows an example of two macros being edited at the
same time.

.. _figure_edit_multiple:

.. figure:: ../../media/quest_macro_editor.png
   :width: 5.681in
   :align: center

   Editing multiple macros

.. include:: userfuncmacro.rsti

.. include:: filestorage.rsti
